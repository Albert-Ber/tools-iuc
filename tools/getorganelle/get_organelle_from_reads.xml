<tool id="get_organelle_from_reads" name="Get organelle from reads" version="0.1.0" python_template_version="3.5">
    <requirements>
        <requirement type="package" version="1.7.5">getorganelle</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
	get_organelle_from_reads.py
        #if str( $fastq_input.fastq_input_selector ) == "single":
	    -u '${fastq_input.fastq_input1}'
        #end if
        #if str($fastq_input.fastq_input_selector) == "paired":
	    -1 '${fastq_input.fastq_input1}' -2 '${fastq_input.fastq_input2}'
        #end if
	-o results_directory -F '$organelle_type'
	#if $settings.advanced == "advanced"
	    #if $settings.s
                -s $settings.s
	    #end if
            #if $settings.max_reads
                --max-reads $settings.max_reads
            #end if
            #if $settings.reduce_reads
                --reduce-reads-for-coverage $settings.reduce_reads
            #end if
            #if $settings.w
	        -w $settings.w
	    #end if
	    -k $settings.k
	    #if $settings.genes
                --genes $settings.genes
            #end if
	#end if
    ]]></command>
    <inputs>
	<conditional name="fastq_input">
            <param name="fastq_input_selector" type="select" label="Single-end or paired reads">
                <option value="single" selected="true">Single-end</option>
                <option value="paired">Paired</option>
            </param>
            <when value="single">
                <param type="data" name="fastq_input1" format="fastq" label="Single-end fastq"/>
            </when>
            <when value="paired">
                <param type="data" name="fastq_input1" format="fastq" label="Forward fastq"/>
                <param type="data" name="fastq_input2" format="fastq" label="Reverse fastq"/>
            </when>
        </conditional>
        <param type="select" name="organelle_type" label="Organelle type">
            <option value="embplant_pt" selected="true">Plant chloroplast</option>
            <option value="embplant_mt">Plant mitochondrial</option>
            <option value="embplant_nr">Plant ribosomal</option>
            <option value="fungus_mt">Fungus mitochondrial</option>
            <option value="fungus_nr">Fungus nuclear</option>
            <option value="animal_mt">Animal mitochondrial</option>
	    <option value="other_mt">Other mitochondrial</option>
	    <option value="anonym">Anonymous</option>
        </param>
	<conditional name="settings">
	    <param name="advanced" type="select" label="Specify advanced parameters">
                <option value="simple" selected="true">No, use program defaults.</option>
                <option value="advanced">Yes, see full parameter list.</option>
	    </param>
            <when value="simple">
            </when>
	    <when value="advanced">
		<param type="data" name="s" format="fasta" optional="true" label="Seed sequence(s)" help="Fasta file to use as initial seed. A seed sequence in GetOrganelle is only used for identifying initial organelle reads. The assembly process is purely de novo."/>
		<param type="integer" name="max_reads" optional="true" label="Maximum number of reads" help="Maximum number of reads to be used. An input larger than 536870911 will be treated as infinity (INF). Default: 1.5E7 (plant chloroplast, plant ribosomal, fungus mitochondrial, fungus nuclear) 7.5E7 (Plant mitochondrial) 3E8 (Animal mitochondrial)"/>
		<param type="integer" name="reduce_reads" optional="true" label="Reduce reads for coverage" help="Maximum number of reads to be used according to target-hitting base coverage. If the estimated target-hitting base coverage is too high and over this VALUE, GetOrganelle automatically reduce the number of reads to generate a final assembly with base coverage close to this VALUE. This design could greatly save computational resources in many situations. A mean base coverage over 500 is extremely sufficient for most cases. This VALUE must be larger than 10. Set this VALUE to inf to disable reducing. Default: 500."/>
		<param type="integer" name="w" optional="true" label="Spades kmer settings" help="Word size for pre-grouping and extending process. This script would try to guess (auto-estimate) a proper word size using an empirical function based on average read length, reads quality, target genome coverage, and other variables that might influence the extending process. Default: estimated automatically"/>
		<param type="text" name="k" value="21,55,85,115" label="Spades kmer settings" help="Use the same format as in SPAdes. Illegal kmer values would be automatically discarded by GetOrganelle. Default: 21,55,85,115"/>
		<param type="data" name="genes" format="fasta" optional="true" label="Gene sequence(s)" help="Fasta file containing protein coding genes and ribosomal RNAs extracted from a reference genome that you want to assemble."/>
	    </when>
	</conditional>
    </inputs>
    <outputs>
	<collection name="path_sequence_list" type="list" label='${tool.name} on ${on_string}: Path sequences'>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.path_sequence.fasta" format="Fasta" directory="results_directory" />
        </collection>
        <data format="txt" name="selected_graph" from_work_dir="results_directory/*.selected_graph.gfa" label='${tool.name} on ${on_string}: Selected graph'/>
	<data format="txt" name="logfile" from_work_dir="results_directory/get_org.log.txt" label='${tool.name} on ${on_string}: Logfile'/>
	<data format="Fastg" name="assembly_graph" from_work_dir="results_directory/extended_K*.assembly_graph.fastg" label='${tool.name} on ${on_string}: Raw assembly graph'/>
	<data format="Fastg" name="simplfied_graph" from_work_dir="results_directory/extended_K*.assembly_graph.fastg.extend-*.fastg" label='${tool.name} on ${on_string}: Simplfied graph'/>
	<data format="tsv" name="assembly_csv" from_work_dir="results_directory/extended_K*.assembly_graph.fastg.extend-*.csv" label='${tool.name} on ${on_string}: Contig labels'/>
    </outputs>
    <tests>
	<test>
	    <param name="fastq_input_selector" value="paired"/>	    
            <param name="fastq_input1" value="Arabidopsis_simulated.1.fq.gz"/>
	    <param name="fastq_input2" value="Arabidopsis_simulated.2.fq.gz"/>
	    <param name="organelle_type" value="embplant_pt" />
	    <assert_stdout>
	        <has_text text="Thank you!" />
	    </assert_stdout>
        </test>
    </tests>
    <help><![CDATA[
	    GetOrganelle v1.7.5.3 get_organelle_from_reads.py assembles organelle genomes from genome skimming data. 
	    See https://github.com/Kinggerm/GetOrganelle for more information.
	    ]]></help>
    <citations>
        <citation type="bibtex">
@misc{githubGetOrganelle,
  author = {LastTODO, FirstTODO},
  year = {TODO},
  title = {GetOrganelle},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/Kinggerm/GetOrganelle},
}</citation>
    </citations>
</tool>
