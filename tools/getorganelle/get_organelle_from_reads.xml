<tool id="get_organelle_from_reads" name="Get organelle from reads" version="@TOOL_VERSION@">
    <macros>
        <import>macros.xml</import>
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">getorganelle</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[

        ## Link input files

        #import re
        #set ext = '.fastq'

        #if str($fastq_input.fastq_input_selector) == 'single':
            #if $fastq_input.fastq_input1.ext.endswith('.gz'):
                #set ext = '.fastq.gz'
            #end if
            #set $in1 = $fastq_input.fastq_input1
            #set $in1_name = re.sub('[^\w\-\s]', '_', str($fastq_input.fastq_input1.name)) + $ext
            ln -s '$in1' '$in1_name' &&
        #else if str($fastq_input.fastq_input_selector) == 'paired':
            #if $fastq_input.fastq_input1.ext.endswith('.gz'):
                #set ext = '.fastq.gz'
            #end if
            #set $in1 = $fastq_input.fastq_input1
            #set $in2 = $fastq_input.fastq_input2
            #set $in1_name = re.sub('[^\w\-\s\._]', '_', str($fastq_input.fastq_input1.name)) + $ext
            #set $in2_name = re.sub('[^\w\-\s\._]', '_', str($fastq_input.fastq_input2.name)) + $ext
            ln -s '$in1' '$in1_name' &&
            ln -s '$in2' '$in2_name' &&
        #else if str($fastq_input.fastq_input_selector) == 'paired_collection':
            #if $fastq_input.paired_input.forward.ext.endswith('.gz'):
                #set ext = '.fastq.gz'
            #end if
            #set $in1 = $fastq_input.paired_input.forward
            #set $in2 = $fastq_input.paired_input.reverse
            #set $in1_name = re.sub('[^\w\-\s\._]', '_', str($fastq_input.paired_input.name)) + $ext
            #set $in2_name = re.sub('[^\w\-\s\._]', '_', str("%s_%s" % ($fastq_input.paired_input.name, "R2"))) + $ext
            ln -s '$in1' '$in1_name' &&
            ln -s '$in2' '$in2_name' &&
        #end if


        ## GetOrganelle cmd

        get_organelle_from_reads.py
        #if str($fastq_input.fastq_input_selector) == "single":
            -u '${$in1_name}'
        #end if
        #if str($fastq_input.fastq_input_selector) == "paired":
            -1 '${$in1_name}' -2 '${$in2_name}'
        #end if
        #if str($fastq_input.fastq_input_selector) == "paired_collection":
            -1 '${$in1_name1}' -2 '${$in2_name}'
        #end if
        -o results_directory -F '$F'
        --config-dir '$config_dir.fields.path'
        #if $settings.advanced == "advanced":
            #if $settings.s
                -s '$settings.s'
            #end if
            #if $settings.max_reads:
                --max-reads $settings.max_reads
            #end if
            #if $settings.reduce_reads_for_coverage:
                #if $settings.reduce_reads_for_coverage == 0:
                    --reduce-reads-for-coverage inf
                #else:
                    --reduce-reads-for-coverage $settings.reduce_reads_for_coverage
                #end if
            #end if
            #if $settings.w:
                -w $settings.w
            #end if
            #if $settings.k:
                -k $settings.k
            #end if
            #if $settings.genes:
                --genes '$settings.genes'
            #end if
        #end if
    ]]></command>
    <inputs>
        <conditional name="fastq_input">
            <param name="fastq_input_selector" type="select" label="Single-end or paired reads">
                <option value="single" selected="true">Single-end</option>
                <option value="paired">Paired</option>
                <option value="paired_collection">Paired collection</option>
            </param>
            <when value="single">
                <param type="data" name="fastq_input1" format="fastqsanger,fastqsanger.gz" label="Single-end fastq"/>
            </when>
            <when value="paired">
                <param type="data" name="fastq_input1" format="fastqsanger,fastqsanger.gz" label="Forward fastq"/>
                <param type="data" name="fastq_input2" format="fastqsanger,fastqsanger.gz" label="Reverse fastq"/>
            </when>
            <when value="paired_collection">
                <param type="data_collection" collection_type="paired" name="fastq_input1" format="fastqsanger,fastqsanger.gz" label="Paired collection fastq"/>
            </when>
        </conditional>
        <param type="select" argument="-F" label="Organelle type">
            <option value="embplant_pt" selected="true">Plant chloroplast</option>
            <option value="embplant_mt">Plant mitochondrial</option>
            <option value="embplant_nr">Plant ribosomal</option>
            <option value="fungus_mt">Fungus mitochondrial</option>
            <option value="fungus_nr">Fungus nuclear</option>
            <option value="animal_mt">Animal mitochondrial</option>
            <option value="other_mt">Other mitochondrial</option>
            <option value="anonym">Anonymous</option>
        </param>
        <param argument="--config-dir" label="Reference data" type="select" help="Contact the administrator of this Galaxy instance if you miss reference data">
            <options from_data_table="getorganelle">
                <filter type="static_value" value="getorganelle" column="2"/>
            </options>
            <validator message="No reference annotation is available for getorganelle" type="no_options" />
        </param>
        <conditional name="settings">
            <param name="advanced" type="select" label="Specify advanced parameters">
                <option value="simple" selected="true">No, use program defaults.</option>
                <option value="advanced">Yes, see full parameter list.</option>
            </param>
            <when value="simple">
            </when>
            <when value="advanced">
                <param name="out" type="select" label="Select output files" multiple="true" display="checkboxes">
                    <option value="path_sequences">Path sequences</option>
                    <option value="selected_graph">Selected graph</option>
                    <option value="raw_assembly_graph">Raw assembly graph</option>
                    <option value="simplified_graph">Simplified graph</option>
                    <option value="contig_labels">Contig labels</option>
                    <option value="seed_fastq">Seed fastq</option>
                    <option value="seed_sam">Seed SAM</option>
                    <option value="spades_log">Spades log</option>
                </param>
                <param type="data" argument="-s" format="fasta" optional="true" label="Seed sequence(s)" help="Fasta file to use as initial seed. A seed sequence in GetOrganelle is only used for identifying initial organelle reads."/>
                <param type="data" argument="--genes" format="fasta" optional="true" label="Gene sequence(s)" help="Fasta file containing protein coding genes and ribosomal RNAs extracted from a reference genome that you want to assemble."/>
                <param type="integer"  argument="--max-reads" optional="true" label="Maximum number of reads" help="Maximum number of reads to be used. An input larger than 536870911 will be treated as infinity (INF). Default: 1.5E7 (plant chloroplast, plant ribosomal, fungus mitochondrial, fungus nuclear) 7.5E7 (Plant mitochondrial) 3E8 (Animal mitochondrial)"/>
                <param type="integer" argument="--reduce-reads-for-coverage" optional="true" label="Reduce reads for coverage" help="Maximum number of reads to be used according to target-hitting base coverage. If the estimated target-hitting base coverage is too high and over this VALUE, GetOrganelle automatically reduce the number of reads to generate a final assembly with base coverage close to this VALUE. This design could greatly save computational resources in many situations. A mean base coverage over 500 is extremely sufficient for most cases. This VALUE must be larger than 10. Set this VALUE to 0 to disable reducing. Default: 500."/>
                <param type="integer" argument="-w" optional="true" label="Word size" help="Word size for pre-grouping and extending process. This script would try to guess (auto-estimate) a proper word size using an empirical function based on average read length, reads quality, target genome coverage, and other variables that might influence the extending process. Default: estimated automatically"/>
                <param type="text" argument="-k" optional="true" label="Spades kmer settings" help="Use the same format as in SPAdes. Illegal kmer values would be automatically discarded by GetOrganelle. Default: 21,55,85,115"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data format="txt" name="logfile" from_work_dir="results_directory/get_org.log.txt" label='${tool.name} on ${on_string}: Logfile'/>
        <collection name="path_sequence_list" type="list" label='${tool.name} on ${on_string}: Path sequences'>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.path_sequence.fasta" format="fasta" directory="results_directory" />
        </collection>
        <data format="gfa1" name="selected_graph" from_work_dir="results_directory/*.selected_graph.gfa" label='${tool.name} on ${on_string}: Selected graph'/>
        <data format="fastg" name="assembly_graph" from_work_dir="results_directory/extended_K*.assembly_graph.fastg" label='${tool.name} on ${on_string}: Raw assembly graph'>
            <filter>settings['advanced'] == 'advanced' and "raw_assembly_graph" in settings['out']</filter>
        </data>
        <data format="fastg" name="simplfied_graph" from_work_dir="results_directory/extended_K*.assembly_graph.fastg.extend-*.fastg" label='${tool.name} on ${on_string}: Simplfied graph'>
            <filter>settings['advanced'] == 'advanced' and "simplified_graph" in settings['out']</filter>
        </data>
        <data format="tsv" name="assembly_csv" from_work_dir="results_directory/extended_K*.assembly_graph.fastg.extend-*.csv" label='${tool.name} on ${on_string}: Contig labels'>
            <filter>settings['advanced'] == 'advanced' and "contig_labels" in settings['out']</filter>
        </data>
        <data format="fastq" name="seed_fastq" from_work_dir="results_directory/seed/*.fq" label='${tool.name} on ${on_string}: Seed fastq'>
            <filter>settings['advanced'] == 'advanced' and "seed_fastq" in settings['out']</filter>
        </data>
        <data format="sam" name="seed_sam" from_work_dir="results_directory/seed/*.sam" label='${tool.name} on ${on_string}: Seed sam'>
            <filter>settings['advanced'] == 'advanced' and "seed_sam" in settings['out']</filter>
        </data>
        <data format="txt" name="spades_log" from_work_dir="results_directory/extended_spades/spades.log" label='${tool.name} on ${on_string}: Spades log'>
            <filter>settings['advanced'] == 'advanced' and "spades_log" in settings['out']</filter>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="3">
            <param name="config_dir" value="getorganelle_refdata"/>
            <param name="fastq_input_selector" value="paired"/>
            <param name="fastq_input1" value="Arabidopsis_simulated.10k.1.fq.gz" ftype="fastqsanger.gz"/>
            <param name="fastq_input2" value="Arabidopsis_simulated.10k.2.fq.gz" ftype="fastqsanger.gz"/>
            <param name="organelle_type" value="embplant_pt" />
            <assert_stdout>
                <has_text text="Thank you!" />
            </assert_stdout>
            <output_collection name="path_sequence_list" type="list" count="2" />
        </test>
    </tests>
    <help><![CDATA[
        GetOrganelle assembles organelle genomes from genome skimming data.
        See https://github.com/Kinggerm/GetOrganelle for more information.
        ]]></help>
    <citations>
        <citation type="doi">10.1186/s13059-020-02154-5</citation>
    </citations>
</tool>
