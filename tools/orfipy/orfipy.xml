<tool id="orfipy" name="Find ORFs" version="0.1.0" python_template_version="3.5">
    <requirements>
        <requirement type="package" version="0.0.4">orfipy</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
      orfipy 
        --procs "\${GALAXY_SLOTS:-1}"
        --outdir ./ 
        #for $o in str($out_files).split(','):
          #if $o == 'BED':
            --bed '$out_bed'
          #else if $o == 'BED12':
            --bed12 '$out_bed12'
          #else if $o == 'DNA':
            --dna '$out_dna'
          #else if $o == 'RNA':
            --rna '$out_rna'
          #else if $o == 'PEP':
            --pep '$out_pep'
          #end if
        #end for
          --strand '$strand'
        #if $min:
          --min '$min' 
        #end if
          --table '$table'
        #if $start:
          --start '$start'
        #end if
        #if $stop:
          --stop '$stop'
        #end if
        #if $ignore_case:
          --ignore-case
        #end if
        #if $partial_3:
          --partial-3
        #end if
        #if $partial_5:
          --partial-5
        #end if
        #if $between_stops:
          --between-stops
        #end if
        #if $include_stop:
          --include-stop
        #end if
        '$input1'
    ]]></command>
    <inputs>
      <param 
          type="data" 
          name="input1" 
          format="fasta,fasta.gz" 
          label="Find ORFs in:" 
          help="ORFs will be detected in this sequence"
        />
      <param type="select" argument="--table" label="Specify genetic code">
        <option value="1" selected="true">1 Standard</option>
        <option value="2">2 Vertebrate mitochondrial</option>
        <option value="3">3 Yeast mitochondrial</option>
        <option value="4">4 Mold, Protozoan, Coelenterate, Mycoplasma, Spiroplasma mitochondrial</option>
        <option value="5">5 Invertebrate Mitochondrial</option>
        <option value="6">6 Ciliate, Dasycladacean, Hexamita Nuclear</option>
        <option value="7">7 Echinoderm and Flatworm Mitochondrial</option>
        <option value="8">8 Euplotid Nuclear</option>
        <option value="9">9 Bacterial, Archaeal and Plant Plastid</option>
        <option value="10">10 Alternative Yeast nuclear</option>
        <option value="11">11 Ascidian mitochondrial</option>
        <option value="12">12 Alternative Flatworm mitochondrial</option>
        <option value="13">13 Chlorophycean mitochondrial</option>
        <option value="14">14 Trematode mitochondrial</option>
        <option value="15">15 Scenedesmus obliquus mitochondrial</option>
        <option value="16">16 Thraustochytrium mitochondrial code</option>
        <option value="17">17 Pterobranchia mitochondrial</option>
        <option value="18">18 Candidate Division SR1 and Gracilibacteria</option>
        <option value="19">19 Pachysolen tannophilus Nuclear Code</option>
        <option value="20">20 Karyorelict nuclear</option>
        <option value="21">21 Condylostoma nuclear</option>
        <option value="22">22 Mesodinium nuclear</option>
        <option value="23">23 Peritrich nuclear</option>
      </param>
      <param 
        type="select" 
        label="Select outputs" 
        multiple="true" 
        display="checkboxes" 
        name="out_files" 
        argument="--bed,--bed12,--dna,--rna,--pep" 
        help="DNA, RNA, and Peptide options will produce FASTA outputs">
          <option value="BED" selected="true">BED</option>
          <option value="BED12">BED12</option>
          <option value="DNA">DNA</option>
          <option value="RNA">RNA</option>
          <option value="PEP">Peptides</option>
      </param>
      <param type="select" display="radio" label="Select strand" argument="--strand" help="Identify ORFs on which strand">
        <option value="b" selected="true">Both</option>
        <option value="f" selected="true">Forward</option>
        <option value="r" selected="true">Reverse</option>
      </param>
      <param 
        type="integer" 
        optional="true" 
        min="0" 
        argument="--min" 
        label="Minimum length of ORFs" 
        help="No ORFs below this value will be reported. All ORFs will be reported if this parameter is not set."/>
      <param 
        type="text" 
        optional="true" 
        argument="--start" 
        label="Start codon(s) to use" 
        help="A commma separated list without spaces. Only ATCG and comma are allowed">
        <validator type="regex" message="Only 'ATCGatcg' and ',' are allowed in this field">^[ATGCatcg,]*$</validator>
      </param>
      <param 
        type="text" 
        optional="true" 
        argument="--stop" 
        label="Stop codon(s) to use" 
        help="A commma separated list without spaces. Only ATCG and comma are allowed">
        <validator type="regex" message="Only 'ATCGatcg' and ',' are allowed in this field">^[ATGCatcg,]*$</validator>
      </param>
      <param 
        type="boolean" 
        display="radio" 
        argument="--ignore-case" 
        label="Ignore case?" 
        help="Ignore case and find ORFs in lower case sequences too. NO = do not ignore (use upper case only). YES = ignore" 
        optional="true"
      />
      <param 
        type="boolean" 
        display="radio" 
        argument="--partial-3" 
        label="Output ORFs with Start but no Stop?" 
        help="Output ORFs with a start codon but lacking an inframe stop codon. NO = do not output. YES = do output" 
        optional="true"
        />
      <param 
        type="boolean" 
        display="radio" 
        argument="--partial-5" 
        label="Output ORFs with Stop but no Start?" 
        help="Output ORFs with an inframe stop codon lacking an inframe start codon. NO = do not output. YES = do output" 
        optional="true"
        />
      <param 
        type="boolean" 
        display="radio" 
        argument="--between-stops" 
        label="Output ORFs bound by Stop codons?" 
        help="Output ORFs defined as regions between stop codons (regions free of stop codon). 
            This will set --partial-3 and --partial-5 true." 
       optional="true"
      />
      <param 
        type="boolean" 
        display="radio" 
        argument="--include-stop" 
        label="Include stop codon in the results?" 
        help="Output ORFs with an inframe stop codon lacking an inframe start codon. NO = do not include. YES = include" 
        optional="true"
      />
      </inputs>
      <outputs>
        <data name="out_bed" format="bed6" label="ORFs on ${on_string} (BED format)">
          <filter>"BED" in out_files</filter>
        </data>
        <data name="out_bed12" format="bed12" label="ORFs on ${on_string} (BED12 format)">
          <filter>"BED12" in out_files</filter>
        </data>
        <data name="out_dna" format="fasta" label="ORFs on ${on_string} (FASTA DNA)">
          <filter>"DNA" in out_files</filter>
        </data>
        <data name="out_rna" format="fasta" label="ORFs on ${on_string} (FASTA RNA)">
          <filter>"RNA" in out_files</filter>
        </data>
        <data name="out_pep" format="fasta" label="ORFs on ${on_string} (FASTA Protein)">
          <filter>"PEP" in out_files</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="input1" value="orfipy.fa"/>
            <param name="out_files" value="BED"/>
            <output name="out_bed" file="test1.bed"/>
        </test>
        <test>
            <param name="input1" value="orfipy.fa"/>
            <param name="out_files" value="DNA"/>
            <param name="min" value="100"/>
            <param name="partial_5" value="true"/>
            <output name="out_dna" file="test2.fa"/>
        </test>
    </tests>

    <help><![CDATA[

**What it does**

Orfipy is a tool for finding open reading frames (ORFs). 

**Parameters**

Galaxy interface of Orfipy supports the following parameters::
    
  --table TABLE         The codon table number to use or path to .json file
                        with codon table. Use --show-tables to see available
                        tables compiled from: https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi?chapter=cgencodes Default: 1
  --start START         Comma-separated list of start-codons. This will
                        override start codons described in translation table.
                        E.g. "--start ATG,ATT" Default: Derived from the
                        translation table selected
  --stop STOP           Comma-separated list of stop codons. This will
                        override stop codons described in translation table.
                        E.g. "--start TAG,TTT" Default: Derived from the
                        translation table selected
  --outdir OUTDIR       Path to outdir default: orfipy_<infasta>_out
  --bed12 BED12         bed12 out file Default: None
  --bed BED             bed out file Default: None
  --dna DNA             fasta (DNA) out file Default: None
  --rna RNA             fasta (RNA) out file Default: None
  --pep PEP             fasta (peptide) out file Default: None
  --min MIN             Minimum length of ORF, excluding stop codon
                        (nucleotide) Default: 30
  --max MAX             Maximum length of ORF, excluding stop codon
                        (nucleotide) Default: 1,000,000,000
  --strand {f,r,b}      Strands to find ORFs [(f)orward,(r)everse,(b)oth]
                        Default: b
  --ignore-case         Ignore case and find ORFs in lower case sequences too.
                        Useful for soft-masked sequences. Default: False
  --partial-3           Output ORFs with a start codon but lacking an inframe
                        stop codon. E.g. "ATG TTT AAA" Default: False
  --partial-5           Output ORFs with an inframe stop codon lacking an
                        inframe start codon. E.g. "TTT AAA TAG" Default: False
  --between-stops       Output ORFs defined as regions between stop codons
                        (regions free of stop codon). This will set
                        --partial-3 and --partial-5 true. Default: False
  --include-stop        Include stop codon in the results, if a stop codon
                        exists. This output format is compatible with
                        TransDecoder's which includes stop codon coordinates
                        Default: False
    ]]></help>
    <citations>
        <citation type="bibtex">
@misc{renameTODO,
  author = {Singh,Urminder},
  year = {2021},
  title = {orfipy: a fast and flexible tool for extracting ORFs},
  url = {https://doi.org/10.1093/bioinformatics/btab090},
}</citation>
    </citations>
</tool>