<tool id="orfipy" name="Find ORFs" version="0.1.0" python_template_version="3.5">
    <requirements>
        <requirement type="package" version="0.0.4">orfipy</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
      orfipy --outdir ./ 
        #for $o in str($out_files).split(','):
          #if $o == 'BED':
            --bed '$out_bed'
          #else if $o == 'BED12':
            --bed12 '$out_bed12'
          #else if $o == 'DNA':
            --dna '$out_dna'
          #else if $o == 'RNA':
            --rna '$out_rna'
          #else if $o == 'PEP':
            --pep '$out_pep'
          #end if
        #end for
        --strand '$strand'
        #if $min:
          --min '$min' 
        #end if
        --table '$table'
        '$input1'
    ]]></command>
    <inputs>
        <param type="data" name="input1" format="fasta,fasta.gz" label="Find ORFs in:" help="ORFs will be detected in this sequence"/>
    <param type="select" argument="--table" label="Specify genetic code">
      <option value="1" selected="true">1 Standard</option>
      <option value="2">2 Vertebrate Mitochondrial</option>
      <option value="3">3 Yeast Mitochondrial</option>
      <option value="4">4 Mold Mitochondrial; Protozoan Mitochondrial; Coelenterate Mitochondrial; Mycoplasma; Spiroplasma</option>
      <option value="5">5 Invertebrate Mitochondrial</option>
      <option value="6">6 Ciliate Nuclear; Dasycladacean Nuclear; Hexamita Nuclear</option>
      <option value="7">7 Echinoderm Mitochondrial; Flatworm Mitochondrial</option>
      <option value="8">8 Euplotid Nuclear</option>
      <option value="9">9 Bacterial, Archaeal and Plant Plastid</option>
      <option value="10">10 Alternative Yeast Nuclear</option>
      <option value="11">11 Ascidian Mitochondrial</option>
      <option value="12">12 Alternative Flatworm Mitochondrial</option>
      <option value="13">13 Chlorophycean Mitochondrial</option>
      <option value="14">14 Trematode Mitochondrial</option>
      <option value="15">15 Scenedesmus obliquus Mitochondrial Code</option>
      <option value="16">16 Thraustochytrium mitochondrial code</option>
      <option value="17">17 Pterobranchia Mitochondrial</option>
      <option value="18">18 Candidate Division SR1 and Gracilibacteria</option>
      <option value="19">19 Pachysolen tannophilus Nuclear Code</option>
      <option value="20">20 Karyorelict Nuclear</option>
      <option value="21">21 Condylostoma Nuclear</option>
      <option value="22">22 Mesodinium Nuclear</option>
      <option value="23">23 Peritrich Nuclear</option>
    </param>
    <param type="select" label="Select outputs" multiple="true" display="checkboxes" name="out_files" argument="--bed,--bed12,--dna,--rna,--pep" help="DNA, RNA, and Peptide options will produce FASTA outputs">
      <option value="BED" selected="true">BED</option>
      <option value="BED12">BED12</option>
      <option value="DNA">DNA</option>
      <option value="RNA">RNA</option>
      <option value="PEP">Peptides</option>
    </param>
    <param type="select" display="radio" label="Select strand" argument="--strand" help="Identify ORFs on which strand">
      <option value="b" selected="true">Both</option>
      <option value="f" selected="true">Forward</option>
      <option value="r" selected="true">Reverse</option>
    </param>
    <param type="integer" optional="true" min="0" argument="--min" label="Minimum length of ORFs" help="No ORFs below this value will be reported"/>
    </inputs>
    <outputs>
        <data name="out_bed" format="bed6">
          <filter>"BED" in out_files</filter>
        </data>
        <data name="out_bed12" format="bed12">
          <filter>"BED12" in out_files</filter>
        </data>
        <data name="out_dna" format="fasta">
          <filter>"DNA" in out_files</filter>
        </data>
        <data name="out_rna" format="fasta">
          <filter>"RNA" in out_files</filter>
        </data>
        <data name="out_pep" format="fasta">
          <filter>"PEP" in out_files</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="input1" value="test1_genome.fna"/>
            <output name="output1" file="test1.bed"/>
        </test>
    </tests>
    <help><![CDATA[
https://usegalaxy.org/root?tool_id=toolshed.g2.bx.psu.edu/repos/iuc/ncbi_acc_download/ncbi_acc_download/0.2.7+galaxy0

Usage: 
    orfipy [<options>] <infile>
    By default orfipy reports ORFs as sequences between start and stop codons. See ORF searching options to change this behaviour.
    If no output type, i.e. dna, rna, pep, bed or bed12, is specified, default output is bed format to stdout.
    
orfipy: extract Open Reading Frames (version 0.0.4)

positional arguments:
  infile                The input file, in plain Fasta/Fastq or gzipped
                        format, containing Nucletide sequences

optional arguments:
  --single-mode         Run in single mode i.e. no parallel processing
                        (SLOWER). If supplied with procs, this is ignored.
                        Default: False
  --table TABLE         The codon table number to use or path to .json file
                        with codon table. Use --show-tables to see available
                        tables compiled from: https://www.ncbi.nlm.nih.gov/Tax
                        onomy/Utils/wprintgc.cgi?chapter=cgencodes Default: 1
  --start START         Comma-separated list of start-codons. This will
                        override start codons described in translation table.
                        E.g. "--start ATG,ATT" Default: Derived from the
                        translation table selected
  --stop STOP           Comma-separated list of stop codons. This will
                        override stop codons described in translation table.
                        E.g. "--start TAG,TTT" Default: Derived from the
                        translation table selected
  --outdir OUTDIR       Path to outdir default: orfipy_<infasta>_out
  --bed12 BED12         bed12 out file Default: None
  --bed BED             bed out file Default: None
  --dna DNA             fasta (DNA) out file Default: None
  --rna RNA             fasta (RNA) out file Default: None
  --pep PEP             fasta (peptide) out file Default: None
  --min MIN             Minimum length of ORF, excluding stop codon
                        (nucleotide) Default: 30
  --max MAX             Maximum length of ORF, excluding stop codon
                        (nucleotide) Default: 1,000,000,000
  --strand {f,r,b}      Strands to find ORFs [(f)orward,(r)everse,(b)oth]
                        Default: b
  --ignore-case         Ignore case and find ORFs in lower case sequences too.
                        Useful for soft-masked sequences. Default: False
  --partial-3           Output ORFs with a start codon but lacking an inframe
                        stop codon. E.g. "ATG TTT AAA" Default: False
  --partial-5           Output ORFs with an inframe stop codon lacking an
                        inframe start codon. E.g. "TTT AAA TAG" Default: False
  --between-stops       Output ORFs defined as regions between stop codons
                        (regions free of stop codon). This will set
                        --partial-3 and --partial-5 true. Default: False
  --include-stop        Include stop codon in the results, if a stop codon
                        exists. This output format is compatible with
                        TransDecoder's which includes stop codon coordinates
                        Default: False
  --longest             Output a separate BED file for longest ORFs per
                        sequence. Requires bed option. Default: False
  --by-frame            Output separate BED files for ORFs by frame. Can be
                        combined with "--longest" to output longest ORFs in
                        each frame. Requires bed option. Default: False
                        estimated by orfipy based on system memory and cpu
  --show-tables         Print translation tables and exit. Default: False
  --version             Print version information and exit

    ]]></help>
    <citations>
        <citation type="bibtex">
@misc{renameTODO,
  author = {LastTODO, FirstTODO},
  year = {TODO},
  title = {TODO},
  url = {https://doi.org/10.1093/bioinformatics/btab090},
}</citation>
    </citations>
</tool>